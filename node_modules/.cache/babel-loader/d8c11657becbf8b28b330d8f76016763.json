{"ast":null,"code":"import { ref, computed } from '@vue/reactivity';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Toast from '@/components/Toast.vue';\nexport default {\n  components: {\n    Toast\n  },\n  props: {\n    editing: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props) {\n    const route = useRoute();\n    const router = useRouter();\n    const todo = ref({\n      subject: '',\n      completed: false,\n      body: ''\n    });\n    const originalTodo = ref(null);\n    const loading = ref(false);\n    const showToast = ref(false);\n    const toastMessage = ref('');\n    const toastAlertType = ref('');\n    const todoId = route.params.id;\n\n    const getTodo = async () => {\n      try {\n        loading.value = true;\n        const res = await axios.get('http://localhost:3000/todos/' + todoId);\n        todo.value = { ...res.data\n        };\n        originalTodo.value = { ...res.data\n        };\n        loading.value = false;\n      } catch (err) {\n        console.log(err);\n        errMsg = String(err);\n        triggerToast(errMsg, 'danger');\n        loading.value = false;\n      }\n    };\n\n    const todoUpdated = computed(() => {\n      return _.isEqual(todo.value, originalTodo.value);\n    });\n\n    const toggleTodoStatus = () => {\n      console.log(todo.value.completed);\n      todo.value.completed = !todo.value.completed;\n    };\n\n    const goTodoListPage = () => {\n      router.push({\n        name: 'Todos'\n      });\n    };\n\n    const triggerToast = (message, type = 'success') => {\n      showToast.value = true;\n      toastAlertType.value = type;\n      toastMessage.value = message;\n      setTimeout(() => {\n        toastMessage.value = '';\n        showToast.value = false;\n        toastAlertType.value = '';\n      }, 3000);\n    };\n\n    if (props.editing) {\n      getTodo();\n    }\n\n    const onSave = async () => {\n      try {\n        let res;\n\n        if (props.editing) {\n          res = await axios.put(`http://localhost:3000/todos/${todoId}`, {\n            subject: todo.value.subject,\n            completed: todo.value.completed,\n            body: todo.value.body\n          });\n          triggerToast('잘 저장되었단다');\n        } else {\n          res = await axios.post(`http://localhost:3000/todos`, {\n            subject: todo.value.subject,\n            completed: todo.value.completed,\n            body: todo.value.body\n          });\n          triggerToast('잘 생성되었단다');\n        }\n\n        originalTodo.value = { ...res.data\n        };\n      } catch (err) {\n        console.error(err);\n        triggerToast('망했어', 'danger');\n      }\n    };\n\n    return {\n      todo,\n      loading,\n      toggleTodoStatus,\n      goTodoListPage,\n      onSave,\n      todoUpdated,\n      showToast,\n      triggerToast,\n      toastMessage,\n      toastAlertType\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["ref","computed","useRoute","useRouter","axios","_","Toast","components","props","editing","type","Boolean","default","setup","route","router","todo","subject","completed","body","originalTodo","loading","showToast","toastMessage","toastAlertType","todoId","params","id","getTodo","value","res","get","data","err","console","log","errMsg","String","triggerToast","todoUpdated","isEqual","toggleTodoStatus","goTodoListPage","push","name","message","setTimeout","onSave","put","post","error"],"sourceRoot":"","sources":["E:\\vue\\vue_todo\\src\\components\\TodoForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div v-if=\"loading\">\r\n            Loading...\r\n        </div>\r\n        <form v-else\r\n        @submit.prevent=\"onSave\">\r\n            <div class=\"row mb-2\">\r\n                <div class=\"col-6\">\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\">Subject</label>\r\n                        <input v-model=\"todo.subject\" type=\"text\" class=\"form-control\">\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-6\" v-if=\"editing\">\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\">Status</label>\r\n                            <div>\r\n                                <button class=\"btn \"\r\n                                :class= \"todo.completed ? 'btn-success' : 'btn-danger'\"\r\n                                @click.prevent=\"toggleTodoStatus\"> \r\n                                {{ todo.completed ? 'Completed' : 'Incomplete'}}\r\n                                \r\n                                </button>\r\n                           \r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 mt-2\" >\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\">Body</label>\r\n                        <textarea v-model=\"todo.body\" \r\n                        class=\"form-control\" cols=\"30\" rows=\"10\"></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-primary\" :disabled = \"todoUpdated\">\r\n                {{ editing ? \"저장\" : \"생성\"}}</button>\r\n            <button type=\"submit\" class=\"btn btn-outline-dark ms-2\"\r\n            @click=\"goTodoListPage\">\r\n                취소</button>\r\n        </form>\r\n        <Toast \r\n            v-if=\"showToast\"\r\n            :message=\"toastMessage\"\r\n            :type=\"toastAlertType\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed } from '@vue/reactivity';\r\nimport { useRoute,useRouter } from 'vue-router'\r\nimport axios from 'axios'\r\nimport _ from 'lodash'\r\nimport Toast from '@/components/Toast.vue';\r\n\r\nexport default {\r\n    components: {\r\n        Toast,\r\n    },\r\n    props:{\r\n        editing : {\r\n            type: Boolean,\r\n            default : false,\r\n        }\r\n    },\r\n    setup(props){\r\n        const route = useRoute();\r\n        const router = useRouter();\r\n        const todo = ref({\r\n            subject :'',\r\n            completed: false,\r\n            body: '',\r\n\r\n        });\r\n        const originalTodo = ref(null);\r\n        const loading = ref(false);\r\n\r\n        const showToast = ref(false);\r\n        const toastMessage = ref('');\r\n        const toastAlertType = ref('');\r\n            \r\n        const todoId = route.params.id;\r\n\r\n\r\n        const getTodo = async() => {\r\n            try { \r\n                loading.value = true\r\n                const res = await axios.get('http://localhost:3000/todos/'+ todoId);\r\n\r\n                todo.value = { ...res.data };\r\n                originalTodo.value = { ...res.data };\r\n\r\n                loading.value = false;\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n                errMsg = String(err)\r\n                triggerToast(errMsg, 'danger');\r\n                loading.value = false;\r\n\r\n            }\r\n\r\n        }\r\n        const todoUpdated = computed(() => {\r\n            return _.isEqual(todo.value, originalTodo.value)\r\n        })\r\n\r\n        const toggleTodoStatus = () => {\r\n            console.log(todo.value.completed)\r\n            todo.value.completed = !todo.value.completed\r\n        }\r\n        const goTodoListPage = () => {\r\n            router.push({\r\n                name:'Todos'\r\n            })\r\n        }\r\n\r\n        const triggerToast = (message, type = 'success') => {\r\n          showToast.value = true;\r\n          toastAlertType.value=type;\r\n          toastMessage.value=message;\r\n\r\n          setTimeout(() => {\r\n\r\n            toastMessage.value='';\r\n            showToast.value= false;\r\n            toastAlertType.value='';\r\n            \r\n          }, 3000)\r\n        };\r\n        if(props.editing){\r\n            getTodo();\r\n            \r\n        }\r\n\r\n        const onSave = async() =>{\r\n            try{\r\n                let res;\r\n                if(props.editing){\r\n                    res = await axios.put(`http://localhost:3000/todos/${todoId}`,{\r\n                        subject : todo.value.subject,\r\n                        completed : todo.value.completed,\r\n                        body: todo.value.body\r\n                    })\r\n                    triggerToast('잘 저장되었단다')\r\n                } else { \r\n                    res = await axios.post(`http://localhost:3000/todos`,{\r\n                        subject : todo.value.subject,\r\n                        completed : todo.value.completed,\r\n                        body: todo.value.body\r\n\r\n                    })\r\n                    triggerToast('잘 생성되었단다')\r\n\r\n                }\r\n                originalTodo.value = {...res.data}\r\n                \r\n            } catch(err){\r\n                console.error(err)\r\n                triggerToast('망했어', 'danger')\r\n            }\r\n           \r\n        }\r\n        \r\n        return {\r\n            todo,\r\n            loading,\r\n            toggleTodoStatus,\r\n            goTodoListPage,\r\n            onSave,\r\n            todoUpdated,\r\n            showToast,\r\n            triggerToast,\r\n            toastMessage,\r\n            toastAlertType,\r\n        }\r\n    }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}