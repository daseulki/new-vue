{"ast":null,"code":"import { ref, computed } from '@vue/reactivity';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from '@/axios';\nimport _ from 'lodash'; // import Toast from \"@/components/Toast.vue\"\n// import { useToast }  from \"@/composables/toast\"\n\nexport default {\n  components: {//Toast,\n  },\n  props: {\n    editing: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props) {\n    const route = useRoute();\n    const router = useRouter();\n    const todo = ref({\n      subject: '',\n      completed: false,\n      body: ''\n    });\n    const originalTodo = ref(null);\n    const loading = ref(false); // const {\n    //     showToast,\n    //     toastMessage,\n    //     toastAlertType,\n    //     triggerToast,\n    // } = useToast();\n\n    const todoId = route.params.id;\n\n    const getTodo = async () => {\n      try {\n        loading.value = true;\n        const res = await axios.get('todos/' + todoId);\n        todo.value = { ...res.data\n        };\n        originalTodo.value = { ...res.data\n        };\n        loading.value = false;\n      } catch (err) {\n        console.log(err);\n        triggerToast('뭔가 망했단다', 'danger');\n        loading.value = false;\n      }\n    };\n\n    const todoUpdated = computed(() => {\n      return _.isEqual(todo.value, originalTodo.value);\n    });\n    const todoEmpty = computed(() => {\n      if (todo.value.subject === \"\") {\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    const toggleTodoStatus = () => {\n      console.log(todo.value.completed);\n      todo.value.completed = !todo.value.completed;\n    };\n\n    const goTodoListPage = () => {\n      router.push({\n        name: 'Todos'\n      });\n    };\n\n    if (props.editing) {\n      getTodo();\n    }\n\n    const onSave = async () => {\n      console.log('버튼눌림');\n\n      try {\n        let res;\n        const data = {\n          subject: todo.value.subject,\n          completed: todo.value.completed,\n          body: todo.value.body\n        };\n\n        if (props.editing) {\n          res = await axios.put(`todos/${todoId}`, data);\n          originalTodo.value = { ...res.data\n          };\n          triggerToast('잘 저장되었단다', 'success');\n        } else {\n          res = await axios.post('todos', data);\n          triggerToast('잘 생성되었단다', 'success');\n        }\n\n        if (!props.editing) {\n          router.push({\n            name: 'Todos'\n          });\n        }\n      } catch (err) {\n        console.error(err);\n        triggerToast('망했어', 'danger');\n      }\n    };\n\n    return {\n      todo,\n      loading,\n      toggleTodoStatus,\n      goTodoListPage,\n      onSave,\n      todoUpdated,\n      todoEmpty // showToast,\n      // triggerToast,\n      // toastMessage,\n      // toastAlertType,\n\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["ref","computed","useRoute","useRouter","axios","_","components","props","editing","type","Boolean","default","setup","route","router","todo","subject","completed","body","originalTodo","loading","todoId","params","id","getTodo","value","res","get","data","err","console","log","triggerToast","todoUpdated","isEqual","todoEmpty","toggleTodoStatus","goTodoListPage","push","name","onSave","put","post","error"],"sourceRoot":"","sources":["C:\\Users\\sisia\\Desktop\\new_vue\\new vue\\src\\components\\TodoForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div v-if=\"loading\">\r\n            Loading...\r\n        </div>\r\n        <form v-else\r\n        @submit.prevent=\"onSave\">\r\n            <div class=\"row mb-2\">\r\n                <div class=\"col-6\">\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\" class=\"mb-1\">제목</label>\r\n                        <input v-model=\"todo.subject\" type=\"text\" class=\"form-control\">\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-6\" v-if=\"editing\">\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\" class=\"mb-1\">상태</label>\r\n                            <div>\r\n                                <button class=\"btn \"\r\n                                :class= \"todo.completed ? 'btn-success' : 'btn-danger'\"\r\n                                @click.prevent=\"toggleTodoStatus\"> \r\n                                {{ todo.completed ? '완료!' : '아직..'}}\r\n                                \r\n                                </button>\r\n                           \r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 my-2\" >\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\" class=\"mb-1\">내용</label>\r\n                        <textarea v-model=\"todo.body\" \r\n                        class=\"form-control\" cols=\"30\" rows=\"10\"></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-primary\" :disabled = \"todoUpdated || todoEmpty\">\r\n                {{ editing ? \"저장\" : \"생성\"}}</button>\r\n            <button type=\"submit\" class=\"btn btn-outline-dark ms-2\"\r\n            @click=\"goTodoListPage\">\r\n                취소</button>\r\n        </form>\r\n        <!-- <teleport to=\"#modal\">\r\n        <Toast \r\n            v-show=\"showToast\"\r\n            :message=\"toastMessage\"\r\n            :type=\"toastAlertType\"\r\n        >\r\n        </Toast>\r\n        </teleport> -->\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed } from '@vue/reactivity';\r\nimport { useRoute,useRouter } from 'vue-router'\r\nimport axios from '@/axios'\r\nimport _ from 'lodash'\r\n// import Toast from \"@/components/Toast.vue\"\r\n// import { useToast }  from \"@/composables/toast\"\r\n\r\nexport default {\r\n    components: {\r\n        //Toast,\r\n    },\r\n    props:{\r\n        editing : {\r\n            type: Boolean,\r\n            default : false,\r\n        }\r\n    },\r\n    setup(props){\r\n        const route = useRoute();\r\n        const router = useRouter();\r\n        const todo = ref({\r\n            subject :'',\r\n            completed: false,\r\n            body: '',\r\n\r\n        });\r\n        const originalTodo = ref(null);\r\n        const loading = ref(false);\r\n\r\n        // const {\r\n        //     showToast,\r\n        //     toastMessage,\r\n        //     toastAlertType,\r\n        //     triggerToast,\r\n        // } = useToast();\r\n            \r\n        const todoId = route.params.id;\r\n\r\n\r\n        const getTodo = async() => {\r\n            try { \r\n                loading.value = true\r\n                const res = await axios.get('todos/'+ todoId);\r\n\r\n                todo.value = { ...res.data };\r\n                originalTodo.value = { ...res.data };\r\n\r\n                loading.value = false;\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n                triggerToast('뭔가 망했단다', 'danger');\r\n                loading.value = false;\r\n\r\n            }\r\n\r\n        }\r\n        const todoUpdated = computed(() => {\r\n            return _.isEqual(todo.value, originalTodo.value)\r\n        })\r\n\r\n        const todoEmpty = computed(() => {\r\n            if (todo.value.subject === \"\"){\r\n                return true\r\n            } else{\r\n                return false\r\n            }\r\n        })\r\n\r\n        const toggleTodoStatus = () => {\r\n            console.log(todo.value.completed)\r\n            todo.value.completed = !todo.value.completed\r\n        }\r\n        const goTodoListPage = () => {\r\n            router.push({\r\n                name:'Todos'\r\n            })\r\n        }\r\n\r\n\r\n        if(props.editing){\r\n            getTodo();\r\n            \r\n        }\r\n\r\n        const onSave = async() =>{\r\n            console.log('버튼눌림')\r\n            try{\r\n                let res;\r\n                const data = {\r\n                    subject : todo.value.subject,\r\n                    completed : todo.value.completed,\r\n                    body: todo.value.body\r\n                }\r\n\r\n                if(props.editing){\r\n                    res = await axios.put(`todos/${todoId}`,data)\r\n                    originalTodo.value = {...res.data}\r\n                    triggerToast('잘 저장되었단다','success')\r\n                } else { \r\n                    res = await axios.post('todos',data)\r\n                    triggerToast('잘 생성되었단다','success')\r\n\r\n                }\r\n               if(!props.editing) {\r\n                router.push({\r\n                    name: 'Todos',\r\n                })\r\n               }\r\n                \r\n\r\n            } catch(err){\r\n                console.error(err)\r\n                triggerToast('망했어', 'danger')\r\n            }\r\n           \r\n        }\r\n        \r\n        return {\r\n            todo,\r\n            loading,\r\n            toggleTodoStatus,\r\n            goTodoListPage,\r\n            onSave,\r\n            todoUpdated,\r\n            todoEmpty,\r\n            // showToast,\r\n            // triggerToast,\r\n            // toastMessage,\r\n            // toastAlertType,\r\n        }\r\n    }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}