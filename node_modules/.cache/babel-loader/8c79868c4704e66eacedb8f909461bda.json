{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, withModifiers as _withModifiers, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, vShow as _vShow, createVNode as _createVNode, Teleport as _Teleport, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"row mb-2\"\n};\nconst _hoisted_4 = {\n  class: \"col-6\"\n};\nconst _hoisted_5 = {\n  class: \"form-group\"\n};\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"\",\n  class: \"mb-1\"\n}, \"제목\", -1\n/* HOISTED */\n);\n\nconst _hoisted_7 = {\n  key: 0,\n  class: \"col-6\"\n};\nconst _hoisted_8 = {\n  class: \"form-group\"\n};\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"\",\n  class: \"mb-1\"\n}, \"상태\", -1\n/* HOISTED */\n);\n\nconst _hoisted_10 = {\n  class: \"col-12 my-2\"\n};\nconst _hoisted_11 = {\n  class: \"form-group\"\n};\n\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"\",\n  class: \"mb-1\"\n}, \"내용\", -1\n/* HOISTED */\n);\n\nconst _hoisted_13 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Toast = _resolveComponent(\"Toast\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \" Loading... \")) : (_openBlock(), _createElementBlock(\"form\", {\n    key: 1,\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $setup.onSave && $setup.onSave(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.todo.subject = $event),\n    type: \"text\",\n    class: \"form-control\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.todo.subject]])])]), $props.editing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_hoisted_9, _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    class: _normalizeClass([\"btn\", $setup.todo.completed ? 'btn-success' : 'btn-danger']),\n    onClick: _cache[1] || (_cache[1] = _withModifiers((...args) => $setup.toggleTodoStatus && $setup.toggleTodoStatus(...args), [\"prevent\"]))\n  }, _toDisplayString($setup.todo.completed ? '완료!' : '아직..'), 3\n  /* TEXT, CLASS */\n  )])])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_hoisted_12, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.todo.body = $event),\n    class: \"form-control\",\n    cols: \"30\",\n    rows: \"10\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.todo.body]])])])]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-primary\",\n    disabled: $setup.todoUpdated || $setup.todoEmpty\n  }, _toDisplayString($props.editing ? \"저장\" : \"생성\"), 9\n  /* TEXT, PROPS */\n  , _hoisted_13), _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-outline-dark ms-2\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.goTodoListPage && $setup.goTodoListPage(...args))\n  }, \" 취소\")], 32\n  /* HYDRATE_EVENTS */\n  )), (_openBlock(), _createBlock(_Teleport, {\n    to: \"#modal\"\n  }, [_withDirectives(_createVNode(_component_Toast, {\n    message: $setup.toastMessage,\n    type: $setup.toastAlertType\n  }, null, 8\n  /* PROPS */\n  , [\"message\", \"type\"]), [[_vShow, $setup.showToast]])]))]);\n}","map":{"version":3,"mappings":";;AACSA,OAAK,EAAC;;;;;;AAMEA,OAAK,EAAC;;;AACFA,OAAK,EAAC;;;AACDA,OAAK,EAAC;;;gCACRC,oBAAqC,OAArC,EAAqC;AAA9BC,KAAG,EAAC,EAA0B;AAAvBF,OAAK,EAAC;AAAiB,CAArC,EAA2B,IAA3B,EAA6B;AAAA;AAA7B;;;;AAKHA,OAAK,EAAC;;;AACDA,OAAK,EAAC;;;gCACRC,oBAAqC,OAArC,EAAqC;AAA9BC,KAAG,EAAC,EAA0B;AAAvBF,OAAK,EAAC;AAAiB,CAArC,EAA2B,IAA3B,EAA6B;AAAA;AAA7B;;;AAYHA,OAAK,EAAC;;;AACDA,OAAK,EAAC;;;iCACRC,oBAAqC,OAArC,EAAqC;AAA9BC,KAAG,EAAC,EAA0B;AAAvBF,OAAK,EAAC;AAAiB,CAArC,EAA2B,IAA3B,EAA6B;AAAA;AAA7B;;;;;;uBA9BpBG,oBAkDM,KAlDN,cAkDM,CAjDSC,gCAAXD,oBAEM,KAFN,EAEME,UAFN,EAAoB,cAApB,oBAGAF,oBAqCO,MArCP,EAqCO;UAAA;AApCNG,YAAM,wDAAUF,uCAAV,EAAgB,WAAhB;AAoCA,GArCP,GAEIH,oBA6BM,KA7BN,cA6BM,CA5BFA,oBAMM,KANN,cAMM,CALDA,oBAIK,KAJL,cAIK,CAHFM,UAGE,kBAFFN,oBAA+D,OAA/D,EAA+D;+DAA/CG,YAAKI,UAAOC,OAAmC;AAAjCC,QAAI,EAAC,MAA4B;AAArBV,SAAK,EAAC;AAAe,GAA/D;;AAAA,oBAAgBI,YAAKI,UAEnB,CAJL,CAKC,CANN,CA4BE,EArBuBG,gCAAzBR,oBAaM,KAbN,cAaM,CAZDF,oBAWK,KAXL,cAWK,CAVFW,UAUE,EATEX,oBAQM,KARN,EAQM,IARN,EAQM,CAPFA,oBAKS,QALT,EAKS;AALDD,SAAK,mBAAC,KAAD,EACJI,YAAKS,SAAL,GAAc,aAAd,GAAc,YADV,EAKJ;AAHRC,WAAK,wDAAUV,2DAAV,EAA0B,WAA1B;AAGG,GALT,mBAGGA,YAAKS,SAAL,GAAc,KAAd,GAAc,OAHjB,EAGiB;AAAA;AAHjB,GAOE,CARN,CASF,CAXL,CAYC,CAbN,sCAqBE,EAPFZ,oBAMM,KANN,eAMM,CALDA,oBAIK,KAJL,eAIK,CAHFc,WAGE,kBAFFd,oBACoD,UADpD,EACoD;+DADjCG,YAAKY,OAAIP,OACwB;AAApDT,SAAK,EAAC,cAA8C;AAA/BiB,QAAI,EAAC,IAA0B;AAArBC,QAAI,EAAC;AAAgB,GADpD;;AAAA,oBAAmBd,YAAKY,OAEtB,CAJL,CAKC,CANN,CAOE,CA7BN,GA8BAf,oBACuC,QADvC,EACuC;AAD/BS,QAAI,EAAC,QAC0B;AADjBV,SAAK,EAAC,iBACW;AADQmB,YAAQ,EAAIf,sBAAeA;AACnC,GADvC,mBACOO,iBAAO,IAAP,GAAO,KADd,EACc;AAAA;AADd,IACcS,WADd,GAEAnB,oBAEe,QAFf,EAEe;AAFPS,QAAI,EAAC,QAEE;AAFOV,SAAK,EAAC,2BAEb;AADdc,WAAK,yCAAEV,uDAAF;AACS,GAFf,EACwB,KADxB,EAlCJ;;AAAA,IA8CE,iBARFiB,aAOWC,SAPX,EAOW;AAPDC,MAAE,EAAC;AAOF,GAPX,EAAqB,iBACrBC,aAKQC,gBALR,EAKQ;AAHHC,WAAO,EAAEtB,mBAGN;AAFHM,QAAI,EAAEN;AAEH,GALR;;AAAA,oCACYA,mBAFS,CAArB,CAQE,EAlDN","names":["class","_createElementVNode","for","_createElementBlock","$setup","_hoisted_2","onSubmit","_hoisted_6","subject","$event","type","$props","_hoisted_9","completed","onClick","_hoisted_12","body","cols","rows","disabled","_hoisted_13","_createBlock","_Teleport","to","_createVNode","_component_Toast","message"],"sourceRoot":"","sources":["C:\\Users\\sisia\\Desktop\\new_vue\\new vue\\src\\components\\TodoForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div v-if=\"loading\">\r\n            Loading...\r\n        </div>\r\n        <form v-else\r\n        @submit.prevent=\"onSave\">\r\n            <div class=\"row mb-2\">\r\n                <div class=\"col-6\">\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\" class=\"mb-1\">제목</label>\r\n                        <input v-model=\"todo.subject\" type=\"text\" class=\"form-control\">\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-6\" v-if=\"editing\">\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\" class=\"mb-1\">상태</label>\r\n                            <div>\r\n                                <button class=\"btn \"\r\n                                :class= \"todo.completed ? 'btn-success' : 'btn-danger'\"\r\n                                @click.prevent=\"toggleTodoStatus\"> \r\n                                {{ todo.completed ? '완료!' : '아직..'}}\r\n                                \r\n                                </button>\r\n                           \r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 my-2\" >\r\n                     <div class=\"form-group\">\r\n                        <label for=\"\" class=\"mb-1\">내용</label>\r\n                        <textarea v-model=\"todo.body\" \r\n                        class=\"form-control\" cols=\"30\" rows=\"10\"></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-primary\" :disabled = \"todoUpdated || todoEmpty\">\r\n                {{ editing ? \"저장\" : \"생성\"}}</button>\r\n            <button type=\"submit\" class=\"btn btn-outline-dark ms-2\"\r\n            @click=\"goTodoListPage\">\r\n                취소</button>\r\n        </form>\r\n        <teleport to=\"#modal\">\r\n        <Toast \r\n            v-show=\"showToast\"\r\n            :message=\"toastMessage\"\r\n            :type=\"toastAlertType\"\r\n        >\r\n        </Toast>\r\n        </teleport>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed } from '@vue/reactivity';\r\nimport { useRoute,useRouter } from 'vue-router'\r\nimport axios from '@/axios'\r\nimport _ from 'lodash'\r\nimport Toast from '@/components/Toast.vue';\r\n\r\nexport default {\r\n    components: {\r\n        Toast,\r\n    },\r\n    props:{\r\n        editing : {\r\n            type: Boolean,\r\n            default : false,\r\n        }\r\n    },\r\n    setup(props){\r\n        const route = useRoute();\r\n        const router = useRouter();\r\n        const todo = ref({\r\n            subject :'',\r\n            completed: false,\r\n            body: '',\r\n\r\n        });\r\n        const originalTodo = ref(null);\r\n        const loading = ref(false);\r\n\r\n        const showToast = ref(false);\r\n        const toastMessage = ref('');\r\n        const toastAlertType = ref('');\r\n            \r\n        const todoId = route.params.id;\r\n\r\n\r\n        const getTodo = async() => {\r\n            try { \r\n                loading.value = true\r\n                const res = await axios.get('todos/'+ todoId);\r\n\r\n                todo.value = { ...res.data };\r\n                originalTodo.value = { ...res.data };\r\n\r\n                loading.value = false;\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n                triggerToast('뭔가 망했단다', 'danger');\r\n                loading.value = false;\r\n\r\n            }\r\n\r\n        }\r\n        const todoUpdated = computed(() => {\r\n            return _.isEqual(todo.value, originalTodo.value)\r\n        })\r\n\r\n        const todoEmpty = computed(() => {\r\n            if (todo.value.subject === \"\"){\r\n                return true\r\n            } else{\r\n                return false\r\n            }\r\n        })\r\n\r\n        const toggleTodoStatus = () => {\r\n            console.log(todo.value.completed)\r\n            todo.value.completed = !todo.value.completed\r\n        }\r\n        const goTodoListPage = () => {\r\n            router.push({\r\n                name:'Todos'\r\n            })\r\n        }\r\n\r\n        const triggerToast = (message, type) => {\r\n          showToast.value = true;\r\n          toastAlertType.value=type;\r\n          toastMessage.value=message;\r\n\r\n          setTimeout(() => {\r\n\r\n            toastMessage.value='';\r\n            showToast.value= false;\r\n            toastAlertType.value='';\r\n            \r\n          }, 3000)\r\n        };\r\n        if(props.editing){\r\n            getTodo();\r\n            \r\n        }\r\n\r\n        const onSave = async() =>{\r\n            console.log('버튼눌림')\r\n            try{\r\n                let res;\r\n                const data = {\r\n                    subject : todo.value.subject,\r\n                    completed : todo.value.completed,\r\n                    body: todo.value.body\r\n                }\r\n\r\n                if(props.editing){\r\n                    res = await axios.put(`todos/${todoId}`,data)\r\n                    originalTodo.value = {...res.data}\r\n                    triggerToast('잘 저장되었단다','success')\r\n                } else { \r\n                    res = await axios.post('todos',data)\r\n                    triggerToast('잘 생성되었단다','success')\r\n\r\n                }\r\n               \r\n                // router.push({\r\n                //     name: 'Todos',\r\n                // })\r\n\r\n            } catch(err){\r\n                console.error(err)\r\n                triggerToast('망했어', 'danger')\r\n            }\r\n           \r\n        }\r\n        \r\n        return {\r\n            todo,\r\n            loading,\r\n            toggleTodoStatus,\r\n            goTodoListPage,\r\n            onSave,\r\n            todoUpdated,\r\n            todoEmpty,\r\n            showToast,\r\n            triggerToast,\r\n            toastMessage,\r\n            toastAlertType,\r\n        }\r\n    }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}